Socket
	Creates an active socket not made for listening
	agrs create the type of socket and protocol
Connect
	Client establishes a connection with a server
	Initiates 3-way handshake	
		Syn - Synchronize the initial sequence number for data xmission
		Syn-Ack - Acknowledge the syn and send own syn
		Ack - Final ack as an "OK"
Bind 
	Assigns an IPv4(32bit)/6(64bit) address to a 16-bit TCP/UDP port
Listen
	Only called by TCP server
	Converts an unconnected socket into a passive socket to accept incoming traffic
		In xsition diag. moves sockets from closed to listen
	Must be called before accept()
	Also creates a queue for inc. SYN packets and a completed connection queue
Accept
	Called by server when a socket makes a request
		Returns new fd in reference to TCP client uneffecting original fd
Berkley Sockets
	API for POSIX sockets and de facto std for networking
	POSIX - 
Select
	Used for multiplexing on clients and servers
	Process
		Set of fd's for reading on
		Set of fd's for writing on
		Select blocks until something needs to happen (read/write)
		See why sleep was interupted and carry out action
	Reading
		Size of reading buffer surpasses threshhold (data to read
		TCP connect gets a FIN, the socket will receive 
		On a listening socket, completed connection != 0
		Pending socket error (errno)
	Writing
		Available size of send buffer surpasses threshhold with a connected socket (data to write)
		Write connect is closed (SIGPIPE)
		Successful non-blocking connect or fail connect
		Pending socket error (errno)
Fork
	Returns twice
		Firts returns PID of child when called in parent
		Later returns 0 to indicate that it is child
	Reasons for call
		Copy self to handle one operation with other handles something else
			Used for network servers
		Process wants to execute another program
			Copy self with fork then run exec
	When parent terminates, all children terminate
	Zombies
		Errant processes that were not killed properly
		
		Avoiding
			Add waitpid() to parent
				waitpid() checks for state change in child
				when child terminates, system clears resources
			Double fork
				
Signals
	Nothing inherently happens when a signal occurs
	For action, signals must be handled (signal handler)
	Signal Handlers
		Accepts only one arg
		Call is a pointer to the function
